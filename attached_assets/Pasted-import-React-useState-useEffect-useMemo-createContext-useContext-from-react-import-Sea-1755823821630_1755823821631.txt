import React, { useState, useEffect, useMemo, createContext, useContext } from 'react';
import { Search, TrendingUp, TrendingDown, RefreshCw, AlertTriangle, ChevronUp, ChevronDown, Plus, X, BarChart3, Home, Star, Settings, Moon, Sun, Menu, PieChart } from 'lucide-react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, AreaChart, Area } from 'recharts';

// Theme Context
const ThemeContext = createContext(null);
const useTheme = () => useContext(ThemeContext);

// Types
interface StockData {
  symbol: string;
  name: string;
  price: number;
  change: number;
  changePercent: number;
  volume: number;
  marketCap: number;
  sector: string;
}

interface ChartData {
  date: string;
  price: number;
  volume: number;
}

interface SortConfig {
  key: keyof StockData | null;
  direction: 'asc' | 'desc';
}

// Alpha Vantage API functions
const ALPHA_VANTAGE_API_KEY = 'YOUR_API_KEY_HERE'; // Replace with your actual API key

const fetchStockQuote = async (symbol: string): Promise<any> => {
  try {
    const response = await fetch(
      `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${ALPHA_VANTAGE_API_KEY}`
    );
    const data = await response.json();
    return data['Global Quote'];
  } catch (error) {
    console.error(`Error fetching quote for ${symbol}:`, error);
    return null;
  }
};

const fetchTimeSeriesDaily = async (symbol: string): Promise<ChartData[]> => {
  try {
    const response = await fetch(
      `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${symbol}&apikey=${ALPHA_VANTAGE_API_KEY}`
    );
    const data = await response.json();
    const timeSeries = data['Time Series (Daily)'];
    
    if (!timeSeries) return [];
    
    return Object.entries(timeSeries)
      .slice(0, 30)
      .map(([date, values]: [string, any]) => ({
        date,
        price: parseFloat(values['4. close']),
        volume: parseInt(values['6. volume'])
      }))
      .reverse();
  } catch (error) {
    console.error(`Error fetching time series for ${symbol}:`, error);
    return [];
  }
};

// Mock data for demonstration (will be replaced by real API)
const generateMockStockData = (): StockData[] => {
  const stocks = [
    { symbol: 'AAPL', name: 'Apple Inc.', sector: 'Technology' },
    { symbol: 'GOOGL', name: 'Alphabet Inc.', sector: 'Technology' },
    { symbol: 'MSFT', name: 'Microsoft Corp.', sector: 'Technology' },
    { symbol: 'AMZN', name: 'Amazon.com Inc.', sector: 'Consumer Discretionary' },
    { symbol: 'TSLA', name: 'Tesla Inc.', sector: 'Consumer Discretionary' },
    { symbol: 'META', name: 'Meta Platforms Inc.', sector: 'Technology' },
    { symbol: 'NVDA', name: 'NVIDIA Corp.', sector: 'Technology' },
    { symbol: 'NFLX', name: 'Netflix Inc.', sector: 'Communication Services' },
    { symbol: 'AMD', name: 'Advanced Micro Devices', sector: 'Technology' },
    { symbol: 'UBER', name: 'Uber Technologies', sector: 'Technology' },
    { symbol: 'SPOT', name: 'Spotify Technology', sector: 'Communication Services' },
    { symbol: 'ZOOM', name: 'Zoom Video Communications', sector: 'Technology' },
    { symbol: 'JPM', name: 'JPMorgan Chase & Co.', sector: 'Financials' },
    { symbol: 'JNJ', name: 'Johnson & Johnson', sector: 'Healthcare' },
    { symbol: 'PG', name: 'Procter & Gamble', sector: 'Consumer Staples' }
  ];
  
  return stocks.map(stock => {
    const basePrice = 50 + Math.random() * 450;
    const change = (Math.random() - 0.5) * 20;
    const changePercent = (change / basePrice) * 100;
    
    return {
      ...stock,
      price: Math.round(basePrice * 100) / 100,
      change: Math.round(change * 100) / 100,
      changePercent: Math.round(changePercent * 100) / 100,
      volume: Math.floor(Math.random() * 50000000) + 1000000,
      marketCap: Math.floor(Math.random() * 2000000000000) + 10000000000
    };
  });
};

const generateMockChartData = (): ChartData[] => {
  const data = [];
  const basePrice = 150;
  
  for (let i = 30; i >= 0; i--) {
    const date = new Date();
    date.setDate(date.getDate() - i);
    const price = basePrice + (Math.random() - 0.5) * 40 + Math.sin(i / 5) * 20;
    
    data.push({
      date: date.toISOString().split('T')[0],
      price: Math.round(price * 100) / 100,
      volume: Math.floor(Math.random() * 10000000) + 1000000
    });
  }
  
  return data;
};

// Utility functions
const formatCurrency = (value: number): string => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  }).format(value);
};

const formatNumber = (value: number): string => {
  if (value >= 1e12) return (value / 1e12).toFixed(2) + 'T';
  if (value >= 1e9) return (value / 1e9).toFixed(2) + 'B';
  if (value >= 1e6) return (value / 1e6).toFixed(2) + 'M';
  if (value >= 1e3) return (value / 1e3).toFixed(2) + 'K';
  return value.toLocaleString();
};

// Components
const LoadingSpinner = () => {
  const { isDark } = useTheme();
  return (
    <div className="flex items-center justify-center py-12">
      <div className="relative">
        <div className={`w-12 h-12 border-4 ${isDark ? 'border-gray-600 border-t-blue-400' : 'border-blue-200 border-t-blue-600'} rounded-full animate-spin`}></div>
        <div className="mt-4 text-center">
          <p className={`${isDark ? 'text-gray-300' : 'text-gray-600'} font-medium`}>Loading...</p>
        </div>
      </div>
    </div>
  );
};

const Navigation = ({ currentPage, onPageChange }) => {
  const { isDark, toggleTheme } = useTheme();
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  const navItems = [
    { id: 'dashboard', label: 'Dashboard', icon: Home },
    { id: 'watchlist', label: 'Watchlist', icon: Star },
    { id: 'analytics', label: 'Analytics', icon: BarChart3 },
    { id: 'settings', label: 'Settings', icon: Settings }
  ];

  return (
    <nav className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border-b sticky top-0 z-50`}>
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex justify-between items-center h-16">
          {/* Logo */}
          <div className="flex items-center">
            <PieChart className={`w-8 h-8 ${isDark ? 'text-blue-400' : 'text-blue-600'} mr-3`} />
            <h1 className={`text-xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>StockTracker</h1>
          </div>

          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center space-x-1">
            {navItems.map(item => {
              const Icon = item.icon;
              return (
                <button
                  key={item.id}
                  onClick={() => onPageChange(item.id)}
                  className={`flex items-center px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                    currentPage === item.id
                      ? isDark 
                        ? 'bg-blue-600 text-white' 
                        : 'bg-blue-100 text-blue-700'
                      : isDark
                        ? 'text-gray-300 hover:text-white hover:bg-gray-700'
                        : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                  }`}
                >
                  <Icon className="w-4 h-4 mr-2" />
                  {item.label}
                </button>
              );
            })}
          </div>

          {/* Theme Toggle & Mobile Menu */}
          <div className="flex items-center space-x-2">
            <button
              onClick={toggleTheme}
              className={`p-2 rounded-md ${isDark ? 'text-gray-300 hover:text-white hover:bg-gray-700' : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'}`}
            >
              {isDark ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
            </button>
            
            <button
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              className={`md:hidden p-2 rounded-md ${isDark ? 'text-gray-300 hover:text-white hover:bg-gray-700' : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'}`}
            >
              <Menu className="w-5 h-5" />
            </button>
          </div>
        </div>

        {/* Mobile Navigation */}
        {isMobileMenuOpen && (
          <div className="md:hidden pb-4">
            {navItems.map(item => {
              const Icon = item.icon;
              return (
                <button
                  key={item.id}
                  onClick={() => {
                    onPageChange(item.id);
                    setIsMobileMenuOpen(false);
                  }}
                  className={`flex items-center w-full px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                    currentPage === item.id
                      ? isDark 
                        ? 'bg-blue-600 text-white' 
                        : 'bg-blue-100 text-blue-700'
                      : isDark
                        ? 'text-gray-300 hover:text-white hover:bg-gray-700'
                        : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                  }`}
                >
                  <Icon className="w-4 h-4 mr-2" />
                  {item.label}
                </button>
              );
            })}
          </div>
        )}
      </div>
    </nav>
  );
};

const StockTable = ({ stocks, searchTerm, sortConfig, onSort, onAddToWatchlist, showAddButton = false }) => {
  const { isDark } = useTheme();

  const filteredAndSortedStocks = useMemo(() => {
    let filtered = stocks.filter(
      stock =>
        stock.symbol.toLowerCase().includes(searchTerm.toLowerCase()) ||
        stock.name.toLowerCase().includes(searchTerm.toLowerCase())
    );

    if (sortConfig.key) {
      filtered.sort((a, b) => {
        const aValue = a[sortConfig.key];
        const bValue = b[sortConfig.key];
        
        if (typeof aValue === 'string' && typeof bValue === 'string') {
          return sortConfig.direction === 'asc' 
            ? aValue.localeCompare(bValue)
            : bValue.localeCompare(aValue);
        }
        
        if (typeof aValue === 'number' && typeof bValue === 'number') {
          return sortConfig.direction === 'asc' 
            ? aValue - bValue
            : bValue - aValue;
        }
        
        return 0;
      });
    }

    return filtered;
  }, [stocks, searchTerm, sortConfig]);

  const getSortIcon = (key) => {
    if (sortConfig.key !== key) {
      return <ChevronUp className={`w-4 h-4 ${isDark ? 'text-gray-500' : 'text-gray-400'}`} />;
    }
    return sortConfig.direction === 'asc' 
      ? <ChevronUp className={`w-4 h-4 ${isDark ? 'text-blue-400' : 'text-blue-600'}`} />
      : <ChevronDown className={`w-4 h-4 ${isDark ? 'text-blue-400' : 'text-blue-600'}`} />;
  };

  return (
    <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-xl shadow-sm border overflow-hidden`}>
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead className={isDark ? 'bg-gray-700' : 'bg-gray-50'}>
            <tr>
              {[
                { key: 'symbol', label: 'Symbol' },
                { key: 'name', label: 'Company' },
                { key: 'price', label: 'Price' },
                { key: 'change', label: 'Change' },
                { key: 'changePercent', label: 'Change %' },
                { key: 'volume', label: 'Volume' }
              ].map(column => (
                <th
                  key={column.key}
                  className={`px-6 py-3 text-left text-xs font-medium ${isDark ? 'text-gray-300' : 'text-gray-500'} uppercase tracking-wider cursor-pointer hover:${isDark ? 'bg-gray-600' : 'bg-gray-100'} transition-colors`}
                  onClick={() => onSort(column.key)}
                >
                  <div className="flex items-center space-x-1">
                    <span>{column.label}</span>
                    {getSortIcon(column.key)}
                  </div>
                </th>
              ))}
              {showAddButton && <th className="px-6 py-3"></th>}
            </tr>
          </thead>
          
          <tbody className={`divide-y ${isDark ? 'divide-gray-700' : 'divide-gray-200'}`}>
            {filteredAndSortedStocks.length === 0 ? (
              <tr>
                <td colSpan={showAddButton ? 7 : 6} className={`px-6 py-8 text-center ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                  {searchTerm ? 'No stocks found matching your search.' : 'No stock data available.'}
                </td>
              </tr>
            ) : (
              filteredAndSortedStocks.map((stock) => (
                <tr key={stock.symbol} className={`hover:${isDark ? 'bg-gray-700' : 'bg-gray-50'} transition-colors`}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className={`font-bold ${isDark ? 'text-blue-400' : 'text-blue-600'}`}>{stock.symbol}</div>
                  </td>
                  
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className={`text-sm font-medium ${isDark ? 'text-gray-200' : 'text-gray-900'}`}>{stock.name}</div>
                    <div className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>{stock.sector}</div>
                  </td>
                  
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className={`text-sm font-semibold ${isDark ? 'text-gray-200' : 'text-gray-900'}`}>
                      {formatCurrency(stock.price)}
                    </div>
                  </td>
                  
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className={`text-sm font-medium ${
                      stock.change >= 0 ? 'text-green-500' : 'text-red-500'
                    }`}>
                      {stock.change >= 0 ? '+' : ''}{formatCurrency(stock.change)}
                    </div>
                  </td>
                  
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      stock.changePercent >= 0 
                        ? isDark ? 'bg-green-900/50 text-green-400' : 'bg-green-100 text-green-800'
                        : isDark ? 'bg-red-900/50 text-red-400' : 'bg-red-100 text-red-800'
                    }`}>
                      {stock.changePercent >= 0 ? (
                        <TrendingUp className="w-3 h-3 mr-1" />
                      ) : (
                        <TrendingDown className="w-3 h-3 mr-1" />
                      )}
                      {stock.changePercent >= 0 ? '+' : ''}{stock.changePercent.toFixed(2)}%
                    </div>
                  </td>
                  
                  <td className={`px-6 py-4 whitespace-nowrap text-sm ${isDark ? 'text-gray-300' : 'text-gray-900'}`}>
                    {formatNumber(stock.volume)}
                  </td>

                  {showAddButton && onAddToWatchlist && (
                    <td className="px-6 py-4 whitespace-nowrap">
                      <button
                        onClick={() => onAddToWatchlist(stock)}
                        className={`inline-flex items-center px-3 py-1 rounded-md text-xs font-medium ${isDark ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-blue-100 hover:bg-blue-200 text-blue-700'} transition-colors`}
                      >
                        <Plus className="w-3 h-3 mr-1" />
                        Add
                      </button>
                    </td>
                  )}
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

const Dashboard = ({ stocks, loading }) => {
  const { isDark } = useTheme();
  const [searchTerm, setSearchTerm] = useState('');
  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });

  if (loading) return <LoadingSpinner />;

  const requestSort = (key) => {
    let direction = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };

  return (
    <div className="space-y-6">
      {/* Market Summary */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-lg shadow-sm border p-6`}>
          <div className="flex items-center justify-between">
            <div>
              <p className={`text-sm font-medium ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Total Stocks</p>
              <p className={`text-2xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>{stocks.length}</p>
            </div>
            <TrendingUp className={`w-8 h-8 ${isDark ? 'text-blue-400' : 'text-blue-600'}`} />
          </div>
        </div>
        
        <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-lg shadow-sm border p-6`}>
          <div className="flex items-center justify-between">
            <div>
              <p className={`text-sm font-medium ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Gainers</p>
              <p className="text-2xl font-bold text-green-500">
                {stocks.filter(s => s.change > 0).length}
              </p>
            </div>
            <TrendingUp className="w-8 h-8 text-green-500" />
          </div>
        </div>
        
        <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-lg shadow-sm border p-6`}>
          <div className="flex items-center justify-between">
            <div>
              <p className={`text-sm font-medium ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Losers</p>
              <p className="text-2xl font-bold text-red-500">
                {stocks.filter(s => s.change < 0).length}
              </p>
            </div>
            <TrendingDown className="w-8 h-8 text-red-500" />
          </div>
        </div>
      </div>

      {/* Search and Controls */}
      <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-xl shadow-sm border p-6`}>
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div>
            <h2 className={`text-xl font-semibold ${isDark ? 'text-white' : 'text-gray-900'} mb-2`}>Market Overview</h2>
            <p className={`${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Live market data and performance metrics</p>
          </div>
          
          <div className="relative">
            <Search className={`absolute left-3 top-1/2 transform -translate-y-1/2 ${isDark ? 'text-gray-400' : 'text-gray-400'} w-5 h-5`} />
            <input
              type="text"
              placeholder="Search stocks..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className={`pl-10 pr-4 py-2 w-64 border ${isDark ? 'border-gray-600 bg-gray-700 text-white placeholder-gray-400' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none`}
            />
          </div>
        </div>
      </div>

      {/* Stock Table */}
      <StockTable 
        stocks={stocks}
        searchTerm={searchTerm}
        sortConfig={sortConfig}
        onSort={requestSort}
      />
    </div>
  );
};

const Analytics = ({ stocks, loading }) => {
  const { isDark } = useTheme();
  const [selectedStock, setSelectedStock] = useState('AAPL');
  const [chartData, setChartData] = useState([]);

  useEffect(() => {
    // Generate mock chart data for demonstration
    setChartData(generateMockChartData());
  }, [selectedStock]);

  if (loading) return <LoadingSpinner />;

  const selectedStockData = stocks.find(s => s.symbol === selectedStock);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-xl shadow-sm border p-6`}>
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div>
            <h2 className={`text-xl font-semibold ${isDark ? 'text-white' : 'text-gray-900'} mb-2`}>Analytics Dashboard</h2>
            <p className={`${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Advanced charts and market analysis</p>
          </div>
          
          <select
            value={selectedStock}
            onChange={(e) => setSelectedStock(e.target.value)}
            className={`px-4 py-2 border ${isDark ? 'border-gray-600 bg-gray-700 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none`}
          >
            {stocks.map(stock => (
              <option key={stock.symbol} value={stock.symbol}>
                {stock.symbol} - {stock.name}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Stock Info Card */}
      {selectedStockData && (
        <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-xl shadow-sm border p-6`}>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div>
              <h3 className={`text-2xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>{selectedStockData.symbol}</h3>
              <p className={`${isDark ? 'text-gray-400' : 'text-gray-600'}`}>{selectedStockData.name}</p>
              <p className={`text-sm ${isDark ? 'text-gray-500' : 'text-gray-500'}`}>{selectedStockData.sector}</p>
            </div>
            
            <div>
              <p className={`text-sm font-medium ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Current Price</p>
              <p className={`text-2xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                {formatCurrency(selectedStockData.price)}
              </p>
            </div>
            
            <div>
              <p className={`text-sm font-medium ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Change</p>
              <p className={`text-2xl font-bold ${selectedStockData.change >= 0 ? 'text-green-500' : 'text-red-500'}`}>
                {selectedStockData.change >= 0 ? '+' : ''}{selectedStockData.changePercent.toFixed(2)}%
              </p>
            </div>
            
            <div>
              <p className={`text-sm font-medium ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Market Cap</p>
              <p className={`text-2xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                {formatCurrency(selectedStockData.marketCap)}
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Price Chart */}
      <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-xl shadow-sm border p-6`}>
        <h3 className={`text-lg font-semibold ${isDark ? 'text-white' : 'text-gray-900'} mb-4`}>
          {selectedStock} - 30 Day Price History
        </h3>
        
        <ResponsiveContainer width="100%" height={300}>
          <AreaChart data={chartData}>
            <CartesianGrid strokeDasharray="3 3" stroke={isDark ? '#374151' : '#E5E7EB'} />
            <XAxis 
              dataKey="date" 
              stroke={isDark ? '#9CA3AF' : '#6B7280'}
              fontSize={12}
              tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
            />
            <YAxis 
              stroke={isDark ? '#9CA3AF' : '#6B7280'}
              fontSize={12}
              tickFormatter={(value) => `$${value.toFixed(0)}`}
            />
            <Tooltip 
              contentStyle={{
                backgroundColor: isDark ? '#1F2937' : '#FFFFFF',
                border: `1px solid ${isDark ? '#374151' : '#E5E7EB'}`,
                borderRadius: '8px',
                color: isDark ? '#F3F4F6' : '#111827'
              }}
              formatter={(value) => [`$${value.toFixed(2)}`, 'Price']}
              labelFormatter={(label) => new Date(label).toLocaleDateString()}
            />
            <Area 
              type="monotone" 
              dataKey="price" 
              stroke="#3B82F6" 
              fill="#3B82F6" 
              fillOpacity={0.1}
              strokeWidth={2}
            />
          </AreaChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

const Watchlist = ({ stocks, loading }) => {
  const { isDark } = useTheme();
  const [watchlistStocks, setWatchlistStocks] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });
  const [showAddModal, setShowAddModal] = useState(false);

  // Initialize with default watchlist
  useEffect(() => {
    if (stocks.length > 0 && watchlistStocks.length === 0) {
      const defaultWatchlist = stocks.filter(stock => 
        ['AAPL', 'GOOGL', 'MSFT', 'TSLA', 'NVDA'].includes(stock.symbol)
      );
      setWatchlistStocks(defaultWatchlist);
    }
  }, [stocks, watchlistStocks.length]);

  const addToWatchlist = (stock) => {
    if (!watchlistStocks.find(s => s.symbol === stock.symbol)) {
      setWatchlistStocks([...watchlistStocks, stock]);
    }
    setShowAddModal(false);
  };

  const removeFromWatchlist = (symbol) => {
    setWatchlistStocks(watchlistStocks.filter(s => s.symbol !== symbol));
  };

  const requestSort = (key) => {
    let direction = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };

  const availableStocks = stocks.filter(stock => 
    !watchlistStocks.find(w => w.symbol === stock.symbol)
  );

  if (loading) return <LoadingSpinner />;

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-xl shadow-sm border p-6`}>
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div>
            <h2 className={`text-xl font-semibold ${isDark ? 'text-white' : 'text-gray-900'} mb-2`}>My Watchlist</h2>
            <p className={`${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Track your favorite stocks</p>
          </div>
          
          <button
            onClick={() => setShowAddModal(true)}
            className={`inline-flex items-center px-4 py-2 ${isDark ? 'bg-blue-600 hover:bg-blue-700' : 'bg-blue-600 hover:bg-blue-700'} text-white rounded-lg transition-colors`}
          >
            <Plus className="w-4 h-4 mr-2" />
            Add Stock
          </button>
        </div>
      </div>

      {/* Watchlist Performance Summary */}
      {watchlistStocks.length > 0 && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-lg shadow-sm border p-6`}>
            <div>
              <p className={`text-sm font-medium ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Portfolio Value</p>
              <p className={`text-2xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                {formatCurrency(watchlistStocks.reduce((sum, stock) => sum + stock.price, 0))}
              </p>
            </div>
          </div>
          
          <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-lg shadow-sm border p-6`}>
            <div>
              <p className={`text-sm font-medium ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Best Performer</p>
              <p className={`text-2xl font-bold text-green-500`}>
                {Math.max(...watchlistStocks.map(s => s.changePercent)).toFixed(2)}%
              </p>
            </div>
          </div>
          
          <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-lg shadow-sm border p-6`}>
            <div>
              <p className={`text-sm font-medium ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Worst Performer</p>
              <p className={`text-2xl font-bold text-red-500`}>
                {Math.min(...watchlistStocks.map(s => s.changePercent)).toFixed(2)}%
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Watchlist Table */}
      {watchlistStocks.length > 0 ? (
        <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-xl shadow-sm border overflow-hidden`}>
          <div className={`px-6 py-4 border-b ${isDark ? 'border-gray-700' : 'border-gray-200'}`}>
            <h3 className={`text-lg font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>
              Your Stocks ({watchlistStocks.length})
            </h3>
          </div>
          
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className={isDark ? 'bg-gray-700' : 'bg-gray-50'}>
                <tr>
                  {[
                    { key: 'symbol', label: 'Symbol' },
                    { key: 'name', label: 'Company' },
                    { key: 'price', label: 'Price' },
                    { key: 'change', label: 'Change' },
                    { key: 'changePercent', label: 'Change %' },
                    { key: 'volume', label: 'Volume' }
                  ].map(column => (
                    <th
                      key={column.key}
                      className={`px-6 py-3 text-left text-xs font-medium ${isDark ? 'text-gray-300' : 'text-gray-500'} uppercase tracking-wider cursor-pointer hover:${isDark ? 'bg-gray-600' : 'bg-gray-100'} transition-colors`}
                      onClick={() => requestSort(column.key)}
                    >
                      <div className="flex items-center space-x-1">
                        <span>{column.label}</span>
                        {sortConfig.key === column.key ? (
                          sortConfig.direction === 'asc' 
                            ? <ChevronUp className={`w-4 h-4 ${isDark ? 'text-blue-400' : 'text-blue-600'}`} />
                            : <ChevronDown className={`w-4 h-4 ${isDark ? 'text-blue-400' : 'text-blue-600'}`} />
                        ) : (
                          <ChevronUp className={`w-4 h-4 ${isDark ? 'text-gray-500' : 'text-gray-400'}`} />
                        )}
                      </div>
                    </th>
                  ))}
                  <th className="px-6 py-3"></th>
                </tr>
              </thead>
              
              <tbody className={`divide-y ${isDark ? 'divide-gray-700' : 'divide-gray-200'}`}>
                {watchlistStocks.map((stock) => (
                  <tr key={stock.symbol} className={`hover:${isDark ? 'bg-gray-700' : 'bg-gray-50'} transition-colors`}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className={`font-bold ${isDark ? 'text-blue-400' : 'text-blue-600'}`}>{stock.symbol}</div>
                    </td>
                    
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className={`text-sm font-medium ${isDark ? 'text-gray-200' : 'text-gray-900'}`}>{stock.name}</div>
                      <div className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>{stock.sector}</div>
                    </td>
                    
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className={`text-sm font-semibold ${isDark ? 'text-gray-200' : 'text-gray-900'}`}>
                        {formatCurrency(stock.price)}
                      </div>
                    </td>
                    
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className={`text-sm font-medium ${
                        stock.change >= 0 ? 'text-green-500' : 'text-red-500'
                      }`}>
                        {stock.change >= 0 ? '+' : ''}{formatCurrency(stock.change)}
                      </div>
                    </td>
                    
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        stock.changePercent >= 0 
                          ? isDark ? 'bg-green-900/50 text-green-400' : 'bg-green-100 text-green-800'
                          : isDark ? 'bg-red-900/50 text-red-400' : 'bg-red-100 text-red-800'
                      }`}>
                        {stock.changePercent >= 0 ? (
                          <TrendingUp className="w-3 h-3 mr-1" />
                        ) : (
                          <TrendingDown className="w-3 h-3 mr-1" />
                        )}
                        {stock.changePercent >= 0 ? '+' : ''}{stock.changePercent.toFixed(2)}%
                      </div>
                    </td>
                    
                    <td className={`px-6 py-4 whitespace-nowrap text-sm ${isDark ? 'text-gray-300' : 'text-gray-900'}`}>
                      {formatNumber(stock.volume)}
                    </td>

                    <td className="px-6 py-4 whitespace-nowrap">
                      <button
                        onClick={() => removeFromWatchlist(stock.symbol)}
                        className={`inline-flex items-center px-3 py-1 rounded-md text-xs font-medium ${isDark ? 'bg-red-600 hover:bg-red-700 text-white' : 'bg-red-100 hover:bg-red-200 text-red-700'} transition-colors`}
                      >
                        <X className="w-3 h-3 mr-1" />
                        Remove
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      ) : (
        <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-xl shadow-sm border p-12 text-center`}>
          <Star className={`w-16 h-16 ${isDark ? 'text-gray-600' : 'text-gray-400'} mx-auto mb-4`} />
          <h3 className={`text-lg font-semibold ${isDark ? 'text-gray-300' : 'text-gray-900'} mb-2`}>No stocks in watchlist</h3>
          <p className={`${isDark ? 'text-gray-400' : 'text-gray-600'} mb-6`}>Add stocks to track their performance</p>
          <button
            onClick={() => setShowAddModal(true)}
            className={`inline-flex items-center px-4 py-2 ${isDark ? 'bg-blue-600 hover:bg-blue-700' : 'bg-blue-600 hover:bg-blue-700'} text-white rounded-lg transition-colors`}
          >
            <Plus className="w-4 h-4 mr-2" />
            Add Your First Stock
          </button>
        </div>
      )}

      {/* Add Stock Modal */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-lg max-w-4xl w-full max-h-[80vh] overflow-hidden`}>
            <div className={`px-6 py-4 border-b ${isDark ? 'border-gray-700' : 'border-gray-200'} flex items-center justify-between`}>
              <h3 className={`text-lg font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>Add Stock to Watchlist</h3>
              <button
                onClick={() => setShowAddModal(false)}
                className={`p-2 rounded-md ${isDark ? 'text-gray-400 hover:text-white hover:bg-gray-700' : 'text-gray-400 hover:text-gray-600 hover:bg-gray-100'}`}
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            
            <div className="p-6 overflow-y-auto max-h-[60vh]">
              <div className="mb-4">
                <div className="relative">
                  <Search className={`absolute left-3 top-1/2 transform -translate-y-1/2 ${isDark ? 'text-gray-400' : 'text-gray-400'} w-5 h-5`} />
                  <input
                    type="text"
                    placeholder="Search available stocks..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className={`pl-10 pr-4 py-2 w-full border ${isDark ? 'border-gray-600 bg-gray-700 text-white placeholder-gray-400' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none`}
                  />
                </div>
              </div>

              <StockTable 
                stocks={availableStocks}
                searchTerm={searchTerm}
                sortConfig={sortConfig}
                onSort={requestSort}
                onAddToWatchlist={addToWatchlist}
                showAddButton={true}
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const Settings = () => {
  const { isDark, toggleTheme } = useTheme();
  const [apiKey, setApiKey] = useState('');
  const [refreshInterval, setRefreshInterval] = useState('30');
  const [currency, setCurrency] = useState('USD');
  const [notifications, setNotifications] = useState(true);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-xl shadow-sm border p-6`}>
        <h2 className={`text-xl font-semibold ${isDark ? 'text-white' : 'text-gray-900'} mb-2`}>Settings</h2>
        <p className={`${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Customize your dashboard preferences</p>
      </div>

      {/* Appearance Settings */}
      <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-xl shadow-sm border p-6`}>
        <h3 className={`text-lg font-semibold ${isDark ? 'text-white' : 'text-gray-900'} mb-4`}>Appearance</h3>
        
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <p className={`font-medium ${isDark ? 'text-white' : 'text-gray-900'}`}>Dark Mode</p>
              <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Toggle between light and dark theme</p>
            </div>
            <button
              onClick={toggleTheme}
              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                isDark ? 'bg-blue-600' : 'bg-gray-200'
              }`}
            >
              <span
                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                  isDark ? 'translate-x-6' : 'translate-x-1'
                }`}
              />
            </button>
          </div>
        </div>
      </div>

      {/* API Settings */}
      <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-xl shadow-sm border p-6`}>
        <h3 className={`text-lg font-semibold ${isDark ? 'text-white' : 'text-gray-900'} mb-4`}>API Configuration</h3>
        
        <div className="space-y-4">
          <div>
            <label className={`block text-sm font-medium ${isDark ? 'text-gray-300' : 'text-gray-700'} mb-2`}>
              Alpha Vantage API Key
            </label>
            <input
              type="password"
              value={apiKey}
              onChange={(e) => setApiKey(e.target.value)}
              placeholder="Enter your API key..."
              className={`w-full px-4 py-2 border ${isDark ? 'border-gray-600 bg-gray-700 text-white placeholder-gray-400' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none`}
            />
            <p className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-600'} mt-1`}>
              Get your free API key from <a href="https://www.alphavantage.co/support/#api-key" target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline">Alpha Vantage</a>
            </p>
          </div>
        </div>
      </div>

      {/* About */}
      <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-xl shadow-sm border p-6`}>
        <h3 className={`text-lg font-semibold ${isDark ? 'text-white' : 'text-gray-900'} mb-4`}>About</h3>
        
        <div className="space-y-3">
          <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
            <strong className={isDark ? 'text-gray-300' : 'text-gray-700'}>Version:</strong> 1.0.0
          </p>
          <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
            <strong className={isDark ? 'text-gray-300' : 'text-gray-700'}>Built with:</strong> React, TypeScript, Tailwind CSS, Recharts
          </p>
          <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
            <strong className={isDark ? 'text-gray-300' : 'text-gray-700'}>Data Provider:</strong> Alpha Vantage API
          </p>
        </div>
      </div>
    </div>
  );
};

const StockDashboard = () => {
  const [stocks, setStocks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState('dashboard');
  const [isDark, setIsDark] = useState(false);

  const toggleTheme = () => {
    setIsDark(!isDark);
  };

  useEffect(() => {
    // Load mock data for demonstration
    const loadData = () => {
      setLoading(true);
      setTimeout(() => {
        setStocks(generateMockStockData());
        setLoading(false);
      }, 1000);
    };

    loadData();
  }, []);

  const themeValue = {
    isDark,
    toggleTheme
  };

  const renderCurrentPage = () => {
    switch (currentPage) {
      case 'dashboard':
        return <Dashboard stocks={stocks} loading={loading} />;
      case 'watchlist':
        return <Watchlist stocks={stocks} loading={loading} />;
      case 'analytics':
        return <Analytics stocks={stocks} loading={loading} />;
      case 'settings':
        return <Settings />;
      default:
        return <Dashboard stocks={stocks} loading={loading} />;
    }
  };

  return (
    <ThemeContext.Provider value={themeValue}>
      <div className={`min-h-screen transition-colors duration-200 ${isDark ? 'bg-gray-900' : 'bg-gray-50'}`}>
        <Navigation currentPage={currentPage} onPageChange={setCurrentPage} />
        
        <main className="max-w-7xl mx-auto p-4">
          {renderCurrentPage()}
        </main>

        {/* Footer */}
        <footer className={`mt-12 border-t ${isDark ? 'border-gray-800 bg-gray-900' : 'border-gray-200 bg-white'} py-8`}>
          <div className="max-w-7xl mx-auto px-4 text-center">
            <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
              Market data updates in real-time. Built with React, TypeScript & Tailwind CSS.
            </p>
            <p className={`text-xs ${isDark ? 'text-gray-500' : 'text-gray-500'} mt-2`}>
              Data provided by Alpha Vantage API. Not for investment advice.
            </p>
          </div>
        </footer>
      </div>
    </ThemeContext.Provider>
  );
};

export default StockDashboard;